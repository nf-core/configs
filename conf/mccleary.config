params {
  config_profile_description = 'McCleary Cluster at Yale'
  config_profile_contact = 'Ryan A. Hagenson'
}

// Documented job rate limit
executor {
  submitRateLimit = '200/1h'
}

singularity {
  enabled = true
}

params {
  igenomes_base = '/gpfs/gibbs/data/genomes/'
  max_memory = 1.TB
  max_cpus = 64
  max_time = 7.d
}

process {
  executor = 'slurm'
  cache = 'lenient'
  scratch = true

  // Update amount of max retries and set "retry" as the error strategy for all error codes
  errorStrategy = 'retry'
  maxRetries = 5
  maxErrors = '-1'    

  // Split on task time to place on the correct queue
  queue = { task.time > 1.day ? 'week' : 'day' }

  // 4GB/CPU and 1+ hour of run time -- retry on `scavenge` if job failed
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.hour * task.attempt, 'time' ) }
    queue = { task.attempt > 3 ? 'day' : 'scavenge,day' }
  }

  // 4GB/CPU and 6+ hour of run time -- attempt to use `scavenge` only once
  withLabel:process_medium {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.hours * task.attempt, 'time' ) }
    queue = { task.attempt > 1 ? 'day' : 'scavenge,day' }
  }

  // 10GB/CPU and 24+ hour of run time -- never use `scavenge`, only `week`
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 120.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.hours * task.attempt, 'time' ) }
    queue = 'week'
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}