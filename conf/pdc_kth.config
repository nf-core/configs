// Nextflow config for use with PDC at KTH

params {
    project                    = null // Naiss project allocation
    clusterOptions             = null
    clusterName                = {
        def cluster = "unknown"
        try {
            cluster = ['/bin/bash', '-c', 'sacctmgr show cluster -n | grep -o "^\s*[^ ]*\s*"'].execute().text.trim()
        }
        catch (IOException _e) {
            System.err.println("WARNING: Could not run sacctmgr, defaulting to unknown")
        }
        cluster
    }.call()

    config_profile_description = 'PDC profile.'
    config_profile_contact     = 'Pontus Freyhult (@pontus)'
    config_profile_url         = "https://www.pdc.kth.se/"

    max_memory                 = 1790.GB
    max_cpus                   = 256
    max_time                   = 7.d

    ignore_params_list         = [
        "cluster-options",
        "clusterOptions",
        "clusterName",
        "genomes",
        "ignore_params_list",
        "input_paths",
        "max_cpus",
        "max_memory",
        "max_time",
        "project",
        "schema_ignore_params",
        "validationSchemaIgnoreParams",
    ]
}

// nf-schema/nf-validation settings
// Different versions use different specifications
validation {
    ignoreParams = params.ignore_params_list
}
params.schema_ignore_params = params.ignore_params_list.join(",")
params.validationSchemaIgnoreParams = params.ignore_params_list.join(",")

// Apptainer settings
singularity {
    enabled    = true
    runOptions = {
        def run_opts = []
        if (params.clusterName == "dardel") {
            run_opts << "-B /cfs/klemming/"
        }
        run_opts.minus("").join(" ")
    }.call()
}

process {
    resourceLimits = [
        memory: 1790.GB,
        cpus: 256,
        time: 7.d,
    ]
    // Should we lock these to specific versions?
    beforeScript   = 'module load PDC apptainer'

    executor       = "slurm"
    clusterOptions = {
        def clusterOptionsCreator = { mem, time, cpus ->
            def slurm_opts = [
                "-A ${params.project}",
                params.clusterOptions ?: "",
            ]

            if (params.clusterName == "dardel") {
                if (time <= 7.d && mem <= 111.GB && cpus <= 256) {
                    slurm_opts << "-p shared"
                }
                else {
                    def partition = time < 1.d
                        ? (mem > 222.GB ? 'memory,main' : 'main')
                        : (mem > 222.GB ? 'memory' : 'long')
                    slurm_opts << "-p ${partition}"
                }
                if (!mem || mem < 6.GB) {
                    // Impose minimum memory if request is below
                    slurm_opts << '--mem=6G'
                }
            }
            slurm_opts.minus("").join(" ")
        }
        clusterOptionsCreator(task.memory, task.time, task.cpus)
    }
}
