// Profile config names for nf-core/configs

params {
  // Specific nf-core/configs params
  config_profile_contact = 'James Fellows Yates (@jfy133)'
  config_profile_description = 'nf-core/eager EVA profile provided by nf-core/configs'
}

// Specific nf-core/eager process configuration
process {

  beforeScript = 'export _JAVA_OPTIONS="-XX:ParallelGCThreads=1 -XX:+PrintCommandLineFlags"'

  maxRetries = 2

  // Solution for clusterOptions comes from here: https://github.com/nextflow-io/nextflow/issues/332 + personal toMega conversion
  clusterOptions = { "-S /bin/bash -j y -o output.log -l h_vmem=${task.memory.toGiga()}G,virtual_free=${task.memory.toGiga()}G" }

  withLabel:'sc_tiny'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'sc_small'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'sc_medium'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_small'{
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_medium' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_large'{
     cpus = { check_max( 8, 'cpus' ) }
     memory = { check_max( 16.GB * task.attempt, 'memory' ) }
     time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_huge'{
     cpus = { check_max( 32, 'cpus' ) }
     memory = { check_max( 256.GB * task.attempt, 'memory' ) }
     time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
   }
  
  // Fixes for SGE and Java incompatibility due to Java using more memory than you tell it to use

  withName: makeSeqDict {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }
      
  withName: fastqc {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: adapter_removal {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 4)}G,virtual_free=${(task.memory.toGiga() * 4)}G" }
   }

  withName: dedup {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: markduplicates {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() + 6)}G,virtual_free=${(task.memory.toGiga() + 6)}G" }
   }
   
  withName: library_merge {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() + 6)}G,virtual_free=${(task.memory.toGiga() + 6)}G" }
   }

  withName: malt {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: maltextract {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: multivcfanalyzer {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: mtnucratio {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 4)}G,virtual_free=${(task.memory.toGiga() * 4)}G" }
   }

  withName: vcf2genome {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: qualimap {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() + 6)}G,virtual_free=${(task.memory.toGiga() + 6)}G" }
   }

  withName: damageprofiler {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() + 6)}G,virtual_free=${(task.memory.toGiga() + 6)}G" }
   }

  withName: circularmapper {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: circulargenerator {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
   }

  withName: preseq {
    clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.toGiga() * 2)}G,virtual_free=${(task.memory.toGiga() * 2)}G" }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'ignore' }
   }

}

profiles {
 
  big_data {
  
    params {
      // Specific nf-core/configs params
      config_profile_contact = 'James Fellows Yates (@jfy133)'
      config_profile_description = 'nf-core/eager big-data EVA profile provided by nf-core/configs'
    }
  
    executor {
      queueSize = 6
     }

    process {

      maxRetries = 2

        withName:hostremoval_input_fastq {
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 32.GB * task.attempt, 'memory' ) }
          time = 1440.h
        }

        withLabel:'sc_tiny'{
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 2.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
        }

        withLabel:'sc_small'{
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 8.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
        }

        withLabel:'sc_medium'{
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 16.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
        }

        withLabel:'mc_small'{
          cpus = { check_max( 2, 'cpus' ) }
          memory = { check_max( 8.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
        }

        withLabel:'mc_medium' {
          cpus = { check_max( 4, 'cpus' ) }
          memory = { check_max( 16.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
        }

        withLabel:'mc_large'{
           cpus = { check_max( 8, 'cpus' ) }
           memory = { check_max( 32.GB * task.attempt, 'memory' ) }
           time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
        }

        withLabel:'mc_huge'{
           cpus = { check_max( 32, 'cpus' ) }
           memory = { check_max( 512.GB * task.attempt, 'memory' ) }
           time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
         }
      }
  }
  
  pathogen_loose {
    params {
      config_profile_description = 'Pathogen (loose) MPI-EVA profile, provided by nf-core/configs.'
      bwaalnn = 0.01
      bwaalnl = 16
    }
  }
  pathogen_strict {
    params {
      config_profile_description = 'Pathogen (strict) MPI-EVA SDAG profile, provided by nf-core/configs.'
      bwaalnn = 0.1
      bwaalnl = 32
     }
  }
  human {
      params {
      config_profile_description = 'Human MPI-EVA SDAG profile, provided by nf-core/configs.'
      bwaalnn = 0.01
      bwaalnl = 16500
     }
  }
}
