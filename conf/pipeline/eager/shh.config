// Profile config names for nf-core/configs

params {
  // Specific nf-core/configs params
  config_profile_contact = 'James Fellows Yates (@jfy133)'
  config_profile_description = 'nf-core/eager SHH profile provided by nf-core/configs'
  igenomes_base = "/projects1/public_data/igenomes/"
}

// Specific nf-core/eager process configuration
process {

  maxRetries = 3

  withName: malt {
    maxRetries = 1
    memory = { task.attempt > 1 ? 1900.GB : 725.GB }
    cpus = { task.attempt > 1 ? 112 : 64 }
    time = 1440.h
    queue = { task.memory > 756.GB ? 'supercruncher' : 'long' }
  }
  
  withName: circulargenerator {
      cpus = { check_max( 1, 'cpus' ) }
      memory = { check_max( 4.GB * task.attempt, 'memory' ) }
      time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  
  withLabel:'sc_tiny'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'sc_small'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'sc_medium'{
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_small'{
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_medium' {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_large'{
     cpus = { check_max( 8, 'cpus' ) }
     memory = { check_max( 16.GB * task.attempt, 'memory' ) }
     time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
  }

  withLabel:'mc_huge'{
     cpus = { check_max( 32, 'cpus' ) }
     memory = { check_max( 256.GB * task.attempt, 'memory' ) }
     time = { task.attempt == 3 ? 1440.h : task.attempt == 2 ? 48.h : 2.h }
   }
  
}

profiles {
 
  big_data {
  
    params {
      // Specific nf-core/configs params
      config_profile_contact = 'James Fellows Yates (@jfy133)'
      config_profile_description = 'nf-core/eager big-data SHH profile provided by nf-core/configs'
    }
  
    executor {
      queueSize = 6
     }

    process {

      maxRetries = 2

        withName:malt {
          maxRetries = 1
          memory = { task.attempt > 1 ? 1900.GB : 725.GB }
          cpus = { task.attempt > 1 ? 112 : 64 }
          time = 1440.h
          queue = { task.memory > 756.GB ? 'supercruncher' : 'long' }
        }
        
        withName:hostremoval_input_fastq {
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 32.GB * task.attempt, 'memory' ) }
          time = 1440.h
          queue = 'long'
        }

        withLabel:'sc_tiny'{
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 2.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
        }

        withLabel:'sc_small'{
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 8.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
        }

        withLabel:'sc_medium'{
          cpus = { check_max( 1, 'cpus' ) }
          memory = { check_max( 16.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
        }

        withLabel:'mc_small'{
          cpus = { check_max( 2, 'cpus' ) }
          memory = { check_max( 8.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
        }

        withLabel:'mc_medium' {
          cpus = { check_max( 4, 'cpus' ) }
          memory = { check_max( 16.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
        }

        withLabel:'mc_large'{
           cpus = { check_max( 8, 'cpus' ) }
           memory = { check_max( 32.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
        }

        withLabel:'mc_huge'{
           cpus = { check_max( 32, 'cpus' ) }
           memory = { check_max( 512.GB * task.attempt, 'memory' ) }
          time = { task.attempt == 3 ? 1440.h : 48.h }
         }
      }
  }
  
  microbiome_screening {
    process {
      // Assuming NCBI NT-sized DB
      withName: malt {
        maxRetries = 1
        memory = 1900.GB
        cpus = 112
        time = 1440.h
        queue = 'supercruncher'
      }
    }
  }
  // IMPORTANT this profile is not reproducible due to hardcoded paths. For initial/automated screening ONLY.
  hops {
    params {
      config_profile_description = 'Rough HOPS screening MPI-SHH profile, provided by nf-core/configs.'
      fasta = '/projects1/Reference_Genomes/Human/HG19/hg19_complete.fasta'
      bwa_index = '/projects1/Reference_Genomes/Human/HG19/'
      fasta_index = '/projects1/Reference_Genomes/Human/HG19/hg19_complete.fasta.fai'
      seq_dict = '/projects1/Reference_Genomes/Human/HG19/hg19_complete.dict'
      bwaalnn = 0.01
      bwaalnl = 16
      run_bam_filtering = true
      bam_unmapped_type = 'fastq'
      run_metagenomic_screening = true
      metagenomic_tool = 'malt'
      metagenomic_min_support_reads = 1
      database = '/projects1/malt/databases/indexed/index040/full-bac-full-vir-etal-nov_2017'
      percent_identity = 85
      malt_mode = 'BlastN'
      malt_alignment_mode = 'SemiGlobal'
      malt_top_percent = 1
      malt_min_support_mode = 'reads'
      malt_max_queries = 100
      malt_memory_mode = 'load'
      run_maltextract = true
      maltextract_taxon_list = '/projects1/users/key/anc5h/soi.backup/List_of_pathogens_KB_fmk12_wViruses1.txt'
      maltextract_ncbifiles = '/projects1/clusterhomes/huebler/RMASifter/RMA_Extractor_Resources/'
      maltextract_filter = 'def_anc'
      maltextract_toppercent = 0.01
      maltextract_destackingoff = false
      maltextract_downsamplingoff = false
      maltextract_duplicateremovaloff = false
      maltextract_matches = false
      maltextract_megansummary = true
      maltextract_percentidentity = 85.0
      maltextract_topalignment = false
    }
  }
  pathogen_loose {
    params {
      config_profile_description = 'Pathogen (loose) MPI-SHH profile, provided by nf-core/configs.'
      bwaalnn = 0.01
      bwaalnl = 16
    }
  }
  pathogen_strict {
    params {
      config_profile_description = 'Pathogen (strict) MPI-SHH SDAG profile, provided by nf-core/configs.'
      bwaalnn = 0.1
      bwaalnl = 32
     }
  }
  human {
      params {
      config_profile_description = 'Human MPI-SHH SDAG profile, provided by nf-core/configs.'
      bwaalnn = 0.01
      bwaalnl = 16500
     }
  }
}
