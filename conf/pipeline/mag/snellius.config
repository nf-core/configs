/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/mag Nextflow Snellius config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A config file, appropriate for nf-core-mag use on Snellius
----------------------------------------------------------------------------------------
*/

params {
    // Specific nf-core/configs params
    config_profile_contact     = '@vdejager'
    config_profile_description = 'nf-core/mag Snellius profile'
}

env {
    OPENBLAS_NUM_THREADS = 1
    OMP_NUM_THREADS      = 1
}

process {

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    time          = 5.d

    withName: FASTQC {
        //clusterOptions = { "-S /bin/bash -V -l h_vmem=${(task.memory.toGiga() * 2)}G" }
        errorStrategy  = { task.exitStatus in [1, 143, 137, 104, 134, 139, 140] ? 'retry' : 'finish' }
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }

    withLabel: process_single {
        cpus   = 1
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    withLabel: process_low {
        cpus   = { 2 * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = 5.d
    }
    withLabel: process_medium {
        cpus   = { 6 * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = 5.d
    }
    withLabel: process_high {
        cpus   = { 12 * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = 5.d
    }
    withLabel: process_long {
        time = 5.d
    }
    withLabel: process_high_memory {
        memory = { 200.GB * task.attempt }
        time   = 5.d
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    withName: GTDBTK_GTDBTK_DB_PREPARATION {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    withName: BOWTIE2_HOST_REMOVAL_BUILD {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    withName: BOWTIE2_HOST_REMOVAL_ALIGN {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    withName: BOWTIE2_PHIX_REMOVAL_ALIGN {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    withName: PORECHOP {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    withName: NANOLYSE {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    //filtlong: exponential increase of memory and time with attempts
    withName: FILTLONG {
        cpus   = { 32 * task.attempt }
        memory = { 56.GB * (2 ** (task.attempt - 1)) }
        time   = 5.d
    }
    withName: CENTRIFUGE {
        cpus   = { 32 * task.attempt }
        memory = { 56.GB * task.attempt }
        time   = 5.d
    }
    withName: KRAKEN2 {
        cpus   = { 32 * task.attempt }
        memory = { 56.GB * task.attempt }
        time   = 5.d
    }
    withName: KRONA {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = 5.d
    }
    withName: CAT_DB_GENERATE {
        cpus =   { 32 * task.attempt }
        memory = { 240.GB * task.attempt }
        time   = 5.d
        queue = 'fat_genoa'
    }
    withName: CAT {
        cpus   = { 32 * task.attempt }
        memory = { 56.GB * task.attempt }
        time   = 5.d
    }
    withName: GTDBTK_CLASSIFYWF {
        cpus   = { 32 * task.attempt }
        memory = { 240.GB * task.attempt }
        time   = 5.d
        queue = 'fat_genoa'
    }
    //MEGAHIT returns exit code 250 when running out of memory
    withName: MEGAHIT {
        cpus          = { 32 * task.attempt }
        memory        = { 56.GB * task.attempt }
        time          = 5.d
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 250) ? 'retry' : 'finish' }
    }
    //SPAdes returns error(1) if it runs out of memory (and for other reasons as well...)!
    //exponential increase of memory and time with attempts, keep number of threads to enable reproducibility
    withName: SPADES {
        cpus          = { 32 * task.attempt }
        memory        = { 240.GB * (2 ** (task.attempt - 1)) }
        time          = 5.d
        errorStrategy = { task.exitStatus in [143, 137, 21, 1] ? 'retry' : 'finish' }
        maxRetries    = 3
        queue = 'fat_genoa'
    }
    withName: SPADESHYBRID {
        cpus          = { 32 * task.attempt }
        memory        = { 240.GB * (2 ** (task.attempt - 1)) }
        time          = { 1.d * (2 ** (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [143, 137, 21, 1] ? 'retry' : 'finish' }
        maxRetries    = 3
        queue = 'fat_genoa'
    }
    //returns exit code 247 when running out of memory
    withName: BOWTIE2_ASSEMBLY_ALIGN {
        cpus          = { 16 * task.attempt }
        memory        = { 28.GB * task.attempt }
        time          = { 24.h * (2 ** (task.attempt - 1)) }
        errorStrategy = { task.exitStatus in [143, 137, 104, 134, 139, 247] ? 'retry' : 'finish' }
    }
    withName: METABAT2_METABAT2 {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = { 24.h * (2 ** (task.attempt - 1)) }
    }
    withName: MAG_DEPTHS {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        time   = { 24.h * (2 ** (task.attempt - 1)) }
    }
    withName: BUSCO {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        errorStrategy = { task.exitStatus in [1, 255] ? 'ignore' : 'retry' }
        time   = { 24.h * (2 ** (task.attempt - 1)) }
    }

    withName: MAXBIN2 {
        cpus   = { 16 * task.attempt }
        memory = { 28.GB * task.attempt }
        errorStrategy = { task.exitStatus in [1, 255] ? 'ignore' : 'retry' }
        time          = { 24.h * (2 ** (task.attempt - 1)) }
    }

    withName: DASTOOL_DASTOOL {
        errorStrategy = { task.exitStatus in [143, 137, 104, 134, 139] ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
        time          = { 24.h * (2 ** (task.attempt - 1)) }
    }
}
