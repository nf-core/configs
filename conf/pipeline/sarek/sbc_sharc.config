/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              
              Sheffield Bioinformatics Core Configuration Profile - ShARC

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    
                  Custom Pipeline Resource Config for nf-core/sarek

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/


// process-specific resource requirements - reduced specification from those in sarek/conf/base.config

process {

    
    // process labels

    withLabel:process_low {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 6.h * task.attempt, 'time' ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withLabel:process_long {
        time   = { check_max( 12.h  * task.attempt, 'time' ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    }


    // process name

    withName:'BWAMEM1_MEM|BWAMEM2_MEM' {
        cpus    = { check_max( 12 * task.attempt, 'cpus' ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory' ) }
        time    = { check_max( 8.h  * task.attempt, 'time' ) }
    }

    withName:'FASTP' {
        cpus    = { check_max( 12 * task.attempt, 'cpus' ) }
    }

    withName:'FASTQC|FASTP|MOSDEPTH|SAMTOOLS_CONVERT' {
        memory  = { check_max( 4.GB * task.attempt, 'memory' ) }
    }

    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|SAMTOOLS_STATS' {
        cpus    = { check_max( 4 * task.attempt, 'cpus' ) }
    }

    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_GATHERBQSRREPORTS' {
        memory  = { check_max( 16.GB * task.attempt, 'memory' ) }
    }

    withName:'GATK4_MARKDUPLICATES' {
        memory  = { check_max( 16.GB * task.attempt, 'memory' ) }
    }

    withName:'FREEBAYES|SAMTOOLS_STATS|SAMTOOLS_INDEX|UNZIP' {
        cpus    = { check_max( 1 * task.attempt, 'cpus' ) }
    }

}


// function 'check_max()' to ensure that resource requirements don't go beyond maximum limit

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min(obj, params.max_cpus as int)
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
