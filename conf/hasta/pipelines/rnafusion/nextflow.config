process {
    withName: CAT_FASTQ {
        memory = { 500.MB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        memory = { 30.MB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: SAMPLESHEET_CHECK {
        memory = { 30.MB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: MULTIQC {
        memory = { 1.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
    withName: SAMTOOLS_VIEW_FOR_ARRIBA {
        memory = { 6.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: SAMTOOLS_VIEW_FOR_STARFUSION {
        memory = { 6.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: SAMTOOLS_INDEX_FOR_STARFUSION {
        memory = { 500.MB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
    withName: SAMTOOLS_INDEX_FOR_ARRIBA {
        memory = { 500.MB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
    withName: ARRIBA_VISUALISATION {
        memory = { 12.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: ARRIBA {
        memory = { 36.GB * task.attempt }
        time   = { 8.h * task.attempt }
        cpus   = 6
    }
    withName: FUSIONREPORT {
        memory = { 500.MB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
    withName: GATK4_MARKDUPLICATES {
        memory = { 65.GB * task.attempt }
        time   = { 6.h * task.attempt }
        cpus   = 6
    }
    withName: GATK4_MARKDUPLICATES {
        clusterOptions = { "-A ${params.priority} ${params.clusterOptions ?: ''} ${task.memory ? "--mem ${task.memory.mega * 1.15 as long}M" : ''}" }
    }
    withName: PICARD_COLLECTRNASEQMETRICS {
        memory   = { 30.GB * task.attempt }
        time     = { 6.h * task.attempt }
        cpus     = 2
        ext.args = ' --TMP_DIR . '
    }
    withName: PICARD_COLLECTRNASEQMETRICS {
        clusterOptions = { "-A ${params.priority} ${params.clusterOptions ?: ''} ${task.memory ? "--mem ${task.memory.mega * 1.15 as long}M" : ''}" }
    }
    withName: PICARD_COLLECTINSERTSIZEMETRICS {
        memory   = { 30.GB * task.attempt }
        time     = { 6.h * task.attempt }
        cpus     = 2
        ext.args = ' --TMP_DIR . '
    }
    withName: PICARD_COLLECTINSERTSIZEMETRICS {
        clusterOptions = { "-A ${params.priority} ${params.clusterOptions ?: ''} ${task.memory ? "--mem ${task.memory.mega * 1.15 as long}M" : ''}" }
    }
    withName: FASTQC_FOR_FASTP {
        memory = { 4.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
    withName: FASTQC {
        memory = { 4.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
    withName: SAMTOOLS_SORT_FOR_ARRIBA {
        memory = { 8.GB * task.attempt }
        time   = { 16.h * task.attempt }
        cpus   = 6
    }
    withName: FASTP {
        memory = { 8.GB * task.attempt }
        time   = { 16.h * task.attempt }
        cpus   = 6
    }
    withName: FUSIONINSPECTOR {
        memory = { 40.GB * task.attempt }
        time   = { 24.h * task.attempt }
        cpus   = 12
    }
    withName: FUSIONCATCHER {
        memory = { 72.GB * task.attempt }
        time   = { 24.h * task.attempt }
        cpus   = 12
    }
    withName: STAR_FOR_STARFUSION {
        memory = { 50.GB * task.attempt }
        time   = { 16.h * task.attempt }
        cpus   = 12
    }
    withName: STAR_FOR_ARRIBA {
        memory = { 40.GB * task.attempt }
        time   = { 16.h * task.attempt }
        cpus   = 12
    }
    withName: STARFUSION {
        memory = { 40.GB * task.attempt }
        time   = { 24.h * task.attempt }
        cpus   = 12
    }
    withName: AGAT_CONVERTSPGFF2TSV {
        memory = { 1.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 1
    }
    withName: VCF_COLLECT {
        memory = { 1.GB * task.attempt }
        time   = { 4.h * task.attempt }
        cpus   = 2
    }
}
