// Config profile metadata
params {
    config_profile_description = 'The Sage Bionetworks Nextflow Config Profile'
    config_profile_contact     = 'Bruno Grande (@BrunoGrandePhD)'
    config_profile_url         = 'https://github.com/Sage-Bionetworks-Workflows'

    // Leverage us-east-1 mirror of select human and mouse genomes
    igenomes_base              = 's3://sage-igenomes/igenomes'
    cpus                       = 4
    max_cpus                   = 32
    max_memory                 = 128.GB
    max_time                   = 240.h
    single_cpu_mem             = 6.GB
}

// Increase time limit to allow file transfers to finish
// The default is 12 hours, which results in timeouts
threadPool.FileTransfer.maxAwait = '24 hour'

// Configure Nextflow to be more reliable on AWS
aws {
    region = "us-east-1"
    client {
        uploadMaxThreads = 4
    }
    batch {
        retryMode            = 'built-in'
        maxParallelTransfers = 1
        maxTransferAttempts  = 10
        delayBetweenAttempts = '60 sec'
    }
}

// Adjust default resource allocations (see `../docs/sage.md`)

process {

    resourceLimits = [
        memory: 128.GB,
        cpus: 32,
        time: 240.h
    ]

    maxErrors      = '-1'
    maxRetries     = 5
    // Enable retries globally for certain exit codes
    errorStrategy  = { task.attempt <= 5 ? 'retry' : 'finish' }

    cpus           = { 1 * factor(task, 2) }
    memory         = { 6.GB * factor(task, 1) }
    time           = { 24.h * factor(task, 1) }

    // Process-specific resource requirements
    withLabel: process_single {
        cpus   = { 1 * factor(task, 2) }
        memory = { 6.GB * factor(task, 1) }
        time   = { 24.h * factor(task, 1) }
    }
    withLabel: process_low {
        cpus   = { 2 * factor(task, 2) }
        memory = { 12.GB * factor(task, 1) }
        time   = { 24.h * factor(task, 1) }
    }
    withLabel: process_medium {
        cpus   = { 8 * factor(task, 2) }
        memory = { 32.GB * factor(task, 1) }
        time   = { 48.h * factor(task, 1) }
    }
    withLabel: process_high {
        cpus   = { 16 * factor(task, 2) }
        memory = { 64.GB * factor(task, 1) }
        time   = { 96.h * factor(task, 1) }
    }
    withLabel: process_long {
        time = { 96.h * factor(task, 1) }
    }
    withLabel: 'process_high_memory|memory_max' {
        memory = { 128.GB * factor(task, 1) }
    }
    withLabel: cpus_max {
        cpus = { 32 * factor(task, 2) }
    }
}

// Function to finely control the increase of the resource allocation
def factor(task, slow_factor = 1) {
    if ( task.exitStatus in [143,137,104,134,139,247] ) {
        return Math.ceil( task.attempt / slow_factor) as int
    } else {
        return 1 as int
    }
}
