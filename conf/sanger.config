// Profile details
params {
    config_profile_description = "The Wellcome Sanger Institute HPC cluster profile"
    config_profile_contact = 'Priyanka Surana (@priyanka-surana)'
    config_profile_url = 'https://www.sanger.ac.uk'
}

// This option is unscoped
poolSize = 4

// Queue and LSF submission options
process {
    executor = 'lsf'

    // Processes without any explicit labels will fail to run on LSF
    // Set low values as defaults to have a default value
    cpus   = 1
    memory = 6.Gb
    time   = 1.h

    // Currently a single set of rules for all clusters, but we could apply
    // different rules to different clusters in their respective configs under ./sanger/
    queue = {
        if (task.time >= 15.day) {
            if (task.memory > 680.GB) {
                error "There is no queue for jobs that need >680 GB and >15 days"
            } else {
                "basement"
            }
        } else if (task.memory > 720.GB) {
            "teramem"
        } else if (task.memory > 350.GB) {
            "hugemem"
        } else if (task.time > 7.day) {
            "basement"
        } else if (task.time > 2.day) {
            "week"
        } else if (task.time > 12.hour) {
            "long"
        } else if (task.time > 1.min) {
            "normal"
        } else {
            "small"
        }
    }

    withLabel: gpu {
        clusterOptions = {
            "-M "+task.memory.toMega()+" -R 'select[mem>="+task.memory.toMega()+"] rusage[mem="+task.memory.toMega()+"] span[ptile=1]' -gpu 'num=1:j_exclusive=yes'"
        }
        queue = { task.time > 12.h ? 'gpu-huge' : task.time > 48.h ? 'gpu-basement' : 'gpu-normal' }
        containerOptions = {
            workflow.containerEngine == "singularity" ? '--containall --cleanenv --nv':
            ( workflow.containerEngine == "docker" ? '--gpus all': null )
        }
    }
}

// Executor details
executor {
    name = 'lsf'
    perJobMemLimit = true
    submitRateLimit = '5 sec'
    killBatchSize = 50
}

// Import cluster-specific settings from ./sanger/
includeConfig ({
    // Default cluster name
    def clustername = "farm22"

    try {
        clustername = ['/bin/bash', '-c', 'lsid | awk \'$0 ~ /^My cluster name is/ {print $5}\''].execute().text.trim()
    } catch (java.io.IOException e) {
        System.err.println("WARNING: Could not run lsid to determine current cluster, defaulting to "+clustername)
    }

    if (clustername == "tol22") {
        return "sanger/tol22.config"
    } else if (clustername == "farm22") {
        return "sanger/farm22.config"
    } else {
        return "/dev/null"
    }
}.call())
