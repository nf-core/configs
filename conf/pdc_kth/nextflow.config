// Nextflow config for use with PDC at KTH

def cluster = "unknown"

try {
    cluster = ['/bin/bash', '-c', 'sacctmgr show cluster -n | grep -o "^\s*[^ ]*\s*"'].execute().text.trim()
} catch (java.io.IOException e) {
    System.err.println("WARNING: Could not run scluster, defaulting to unknown")
}

params {
    project = null // Naiss project allocation

    config_profile_description = 'PDC profile.'
    config_profile_contact = 'Pontus Freyhult (@pontus)'
    config_profile_url = "https://www.pdc.kth.se/"

    max_memory = 1790.GB
    max_cpus = 256
    max_time = 7.d

    schema_ignore_params = "genomes,input_paths,cluster-options,clusterOptions,project,validationSchemaIgnoreParams"
    validationSchemaIgnoreParams = "genomes,input_paths,cluster-options,clusterOptions,project,schema_ignore_params"
}


def containerOptionsCreator = {
    switch(cluster) {
        case "dardel":
            return '-B /cfs/klemming/'
    }

    return ''
}

def clusterOptionsCreator = { mem, time, cpus ->
    String base = "-A $params.project ${params.clusterOptions ?: ''}"

    switch(cluster) {
        case "dardel":
            String extra = ''

            if (time < 7.d && mem <= 222.GB && cpus < 256) {
                extra += ' -p shared '
            }
            else if (time < 1.d) {
                // Shortish
                if (mem > 222.GB) {
                    extra += ' -p memory,main '
                } else {
                    extra += ' -p main '
                }
            } else {
                // Not shortish
                if (mem > 222.GB) {
                    extra += ' -p memory '
                } else {
                    extra += ' -p long '
                }
            }

            if (!mem || mem < 6.GB) {
                // Impose minimum memory if request is below
                extra += ' --mem=6G '
            }

            return base+extra
    }

    return base
}


singularity {
    enabled = true
    runOptions = containerOptionsCreator()
}

process {
    resourceLimits = [
        memory: 1790.GB,
        cpus: 256,
        time: 7.d
    ]
    // Should we lock these to specific versions?
    beforeScript = 'module load PDC apptainer'

    executor = 'slurm'
    clusterOptions = { clusterOptionsCreator(task.memory, task.time, task.cpus) }
}

